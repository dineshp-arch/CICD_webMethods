<?xml version="1.0"?>

<project default="createRepositoryProject" basedir=".">	

	<!--<property name="antlogger.echo" value="false"/>
	
	 the more advanced ant tasks (for, if) require this: -->
	<!-- For wm9.7 
    <taskdef classpath = "${sag.install.dir}/common/lib/ext/ant-contrib-1.0b3.jar" resource="net/sf/antcontrib/antlib.xml"/> -->

	<!-- For wm10.x and above 
    <taskdef classpath = "${sag.install.dir}/common/lib/ant/ant-contrib-1.0b3.jar" resource="net/sf/antcontrib/antlib.xml"/> -->

	<taskdef classpath = "${sag.install.dir}/common/lib/ant/ant-contrib-1.0b3.jar" resource="net/sf/antcontrib/antlib.xml"/>
	
	<target name="createRepositoryProject">

		<delete file="${automator.file}" quiet="true"/>

		<echo message="Prepare Automater file from xslt template  ${xslt.template}...."/>
		<xslt style="${xslt.template}" in="${automator.template}" out="${automator.file}">

			<param name="deployerHost" expression="${deployer.host}" />
			<param name="deployerPort" expression="${deployer.port}" />
			<param name="deployerUsername" expression="${deployer.user}" />
			<param name="deployerPassword" expression="${deployer.pwd}" />

			<param name="targetHost" expression="${target.host}" />
			<param name="targetPort" expression="${target.port}" />
			<param name="targetAlias" expression="${target.alias}" />
			<param name="targetUsername" expression="${target.user}" />
			<param name="targetPassword" expression="${target.pwd}" />
			<param name="targetVersion" expression="${target.version}" />
			<param name="targetSsl" expression="${target.ssl}" />

			<param name="sourceAlias" expression="${repository.alias}" />
			<param name="sourcePath" expression="${repository.path}" />

			<param name="projectName" expression="${proj.name}" />
			<param name="compositeName" expression="${composite.name}" />
			<param name="setName" expression="${deployment.name}" />
			<param name="mapName" expression="${map.name}" />
			<param name="candidateName" expression="${candidate.name}" />
			<param name="buildVersion" expression="${build.version}" />

		</xslt>

		<echo message="Automater file name ....${automator.file}"/>

		<if>
			<os family="windows"/>
			<then>
				<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
					<arg value="/c" /> 
					<arg value="projectautomator.bat"/>
					<arg value="${automator.file}" />
				</exec>
			</then>
			<else>
				<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true">
					<arg value="projectautomatorUnix.sh"/>
					<arg value="${automator.file}" />
				</exec>
			</else>
		</if>

	</target>    	

	<target name="createRepositoryProjectForCluster">

		<delete file="${automator.file}" quiet="true"/>

		<echo message="Prepare Automater file from xslt template  ${xslt.template}...."/>
		<xslt style="${xslt.template}" in="${automator.template}" out="${automator.file}">

			<param name="deployerHost" expression="${deployer.host}" />
			<param name="deployerPort" expression="${deployer.port}" />
			<param name="deployerUsername" expression="${deployer.user}" />
			<param name="deployerPassword" expression="${deployer.pwd}" />

			<param name="targetClusterGroupAlias" expression="${target.clusterGroupAlias}" />

			<param name="targetHost1" expression="${target.host1}" />
			<param name="targetPort1" expression="${target.port1}" />
			<param name="targetAlias1" expression="${target.alias1}" />
			<param name="targetUsername1" expression="${target.user1}" />
			<param name="targetPassword1" expression="${target.pwd1}" />
			<param name="targetVersion1" expression="${target.version1}" />
			<param name="targetSsl1" expression="${target.ssl1}" />

			<param name="targetHost2" expression="${target.host2}" />
			<param name="targetPort2" expression="${target.port2}" />
			<param name="targetAlias2" expression="${target.alias2}" />
			<param name="targetUsername2" expression="${target.user2}" />
			<param name="targetPassword2" expression="${target.pwd2}" />
			<param name="targetVersion2" expression="${target.version2}" />
			<param name="targetSsl2" expression="${target.ssl2}" />


			<param name="sourceAlias" expression="${repository.alias}" />
			<param name="sourcePath" expression="${repository.path}" />

			<param name="projectName" expression="${proj.name}" />
			<param name="compositeName" expression="${composite.name}" />
			<param name="setName" expression="${deployment.name}" />
			<param name="mapName" expression="${map.name}" />
			<param name="candidateName" expression="${candidate.name}" />
			<param name="buildVersion" expression="${build.version}" />

		</xslt>

		<echo message="Automater file name ....${automator.file}"/>

		<if>
			<os family="windows"/>
			<then>
				<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
					<arg value="/c" />
					<arg value="projectautomator.bat"/>
					<arg value="${automator.file}" />
				</exec>
			</then>
			<else>
				<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true">
					<arg value="projectautomatorUnix.sh"/>
					<arg value="${automator.file}" />
				</exec>
			</else>
		</if>
	</target>
    	
	<target name="createRuntimeProject">
    
		<echo message="Prepare Automater file from xslt template  ${xslt.template}...."/>
		<xslt style="${xslt.template}" in="${automator.template}" out="${automator.definition}">
		
			<param name="deployerHost" expression="${deployer.host}" />
			<param name="deployerPort" expression="${deployer.port}" />
			<param name="deployerUsername" expression="${deployer.user}" />
			<param name="deployerPassword" expression="${deployer.pwd}" />
			<param name="projectName" expression="${proj.name}" />
			<param name="buildName" expression="${build.name}" />
			<param name="deploymentName" expression="${deployment.name}" />
			<param name="srcHost" expression="${src.host}" />
			<param name="srcPort" expression="${src.port}" />
			<param name="srcUsername" expression="${src.user}" />
			<param name="srcPassword" expression="${src.pwd}" />
			<param name="srcAlias" expression="${src.alias}" />
			<!-- For ESB project -->
			<param name="packageList" expression="${package.list}" />
			<param name="portList" expression="${port.list}" />
			<param name="aclList" expression="${acl.list}" />
			<!-- For BPM project -->
			<param name="processList" expression="${process.list}" />
			<!-- For MWS project -->			
			<param name="portalUserList" expression="${portal.user.list}" />
			<param name="taskList" expression="${task.list}" />
			<param name="taskAppList" expression="${task.app.list}" />
			<param name="portletList" expression="${portlet.list}" />	
		</xslt>

		<echo message="Automater file name ....${automator.definition}"/>
		<if>
			<os family="windows"/>
			<then>
				<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
					<arg value="/c" /> 
					<arg value="projectautomator.bat"/>
					<arg value="${automator.definition}" />
				</exec>
			</then>
		<else>
				<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true">
					<arg value="projectautomatorUnix.sh"/>
					<arg value="${automator.definition}" />
				</exec>
		</else>
		</if>
	</target>	
	
	<target name="importVarSubs">	
		<if>
			<available file="${vs.dir}/${vs.file}"/>
			<then>
				<echo message="Copying the new variable Substitutions...."/>
				<copy file="${vs.dir}/${vs.file}" tofile="${deployer.home}/replicate/inbound/${proj.name}_${vs.file}" overwrite="true">
					<filterchain>
						<striplinecomments>
							<comment value="!"/>
						</striplinecomments>
						<replacetokens>
							<token key="REPO_ALIAS" value="${repository.alias}"/>
							<token key="DEPSET_NAME" value="${deployment.name}"/>
							<token key="TARGET_ALIAS" value="${target.alias}"/>
						</replacetokens>
					</filterchain>
				</copy>
				<echo message="Importing the new variable Substitutions...."/>
				<if>
					<os family="windows"/>
					<then>
						<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
							<arg value="/c" /> 
							<arg value="Deployer.bat"/>
							<arg value="--import" />
							<arg value="-varsub" />
							<arg value="--vsFile" />
							<arg value="${proj.name}_${vs.file}" />
							<arg value="-map" />
							<arg value="${proj.map}" />
							<arg value="-project" />
							<arg value="${proj.name}" />
							<arg value="-validate" />
							<arg value="false" />
							<arg value="-host" />
							<arg value="${deployer.host}" />
							<arg value="-port" />
							<arg value="${deployer.port}" />
							<arg value="-user" />
							<arg value="${deployer.user}" />
							<arg value="-pwd" />
							<arg value="${deployer.pwd}" />
						</exec>
					</then>
					<else>
						<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true"> 
							<arg value="Deployer.sh"/>
							<arg value="--import" />
							<arg value="-varsub" />
							<arg value="--vsFile" />
							<arg value="${proj.name}_${vs.file}" />
							<arg value="-map" />
							<arg value="${proj.map}" />
							<arg value="-project" />
							<arg value="${proj.name}" />
							<arg value="-validate" />
							<arg value="false" />
							<arg value="-host" />
							<arg value="${deployer.host}" />
							<arg value="-port" />
							<arg value="${deployer.port}" />
							<arg value="-user" />
							<arg value="${deployer.user}" />
							<arg value="-pwd" />
							<arg value="${deployer.pwd}" />
						</exec>
					</else>
				</if>	        		        	
			</then>
			<else>
				<echo message="Warning : file doesn't exist ${vs.dir}/${vs.file} !!!...."/>	            
			</else>
		</if>

	</target>

	<target name="importVarSubsForCluster">	
		<if>
			<available file="${vs.dir}/${vs.file}"/>
			<then>
				<echo message="Copying the new variable Substitutions...."/>
				<copy file="${vs.dir}/${vs.file}" tofile="${deployer.home}/replicate/inbound/${proj.name}_${vs.file}" overwrite="true">
					<filterchain>
						<striplinecomments>
							<comment value="!"/>
						</striplinecomments>
						<replacetokens>
							<token key="REPO_ALIAS" value="${repository.alias}"/>
							<token key="DEPSET_NAME" value="${deployment.name}"/>
							<token key="TARGET_ALIAS1" value="${target.alias1}"/>
							<token key="TARGET_ALIAS2" value="${target.alias2}"/>
						</replacetokens>
					</filterchain>
				</copy>
				<echo message="Importing the new variable Substitutions...."/>
				<if>
					<os family="windows"/>
					<then>
						<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
							<arg value="/c" /> 
							<arg value="Deployer.bat"/>
							<arg value="--import" />
							<arg value="-varsub" />
							<arg value="--vsFile" />
							<arg value="${proj.name}_${vs.file}" />
							<arg value="-map" />
							<arg value="${proj.map}" />
							<arg value="-project" />
							<arg value="${proj.name}" />
							<arg value="-validate" />
							<arg value="false" />
							<arg value="-host" />
							<arg value="${deployer.host}" />
							<arg value="-port" />
							<arg value="${deployer.port}" />
							<arg value="-user" />
							<arg value="${deployer.user}" />
							<arg value="-pwd" />
							<arg value="${deployer.pwd}" />
						</exec>
					</then>
					<else>
						<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true"> 
							<arg value="Deployer.sh"/>
							<arg value="--import" />
							<arg value="-varsub" />
							<arg value="--vsFile" />
							<arg value="${proj.name}_${vs.file}" />
							<arg value="-map" />
							<arg value="${proj.map}" />
							<arg value="-project" />
							<arg value="${proj.name}" />
							<arg value="-validate" />
							<arg value="false" />
							<arg value="-host" />
							<arg value="${deployer.host}" />
							<arg value="-port" />
							<arg value="${deployer.port}" />
							<arg value="-user" />
							<arg value="${deployer.user}" />
							<arg value="-pwd" />
							<arg value="${deployer.pwd}" />
						</exec>
					</else>
				</if>	        		        	
			</then>
			<else>
				<echo message="Warning : file doesn't exist ${vs.dir}/${vs.file} !!!...."/>	            
			</else>
		</if>

	</target>
	<target name="exportProject">
		<echo message="Exporting project..."/>
		<if>
			<os family="windows"/>
				<then>
					<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
						<arg value="/c" /> 
						<arg value="Deployer.bat"/>
						<arg value="--export" />
						<arg value="--build" />
						<arg value="${build.name}" />
						<arg value="-project" />
						<arg value="${proj.name}" />
						<arg value="-host" />
						<arg value="${deployer.host}" />
						<arg value="-port" />
						<arg value="${deployer.port}" />
						<arg value="-user" />
						<arg value="${deployer.user}" />
						<arg value="-pwd" />
						<arg value="${deployer.pwd}" />
					</exec>
				</then>
		<else>
					<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true">
						<arg value="Deployer.sh"/>
						<arg value="--export" />
						<arg value="--build" />
						<arg value="${build.name}" />
						<arg value="-project" />
						<arg value="${proj.name}" />
						<arg value="-host" />
						<arg value="${deployer.host}" />
						<arg value="-port" />
						<arg value="${deployer.port}" />
						<arg value="-user" />
						<arg value="${deployer.user}" />
						<arg value="-pwd" />
						<arg value="${deployer.pwd}" />
					</exec>
		</else>
		</if>
	</target>
	
	<target name="deployProject">
		<echo message="Deploying the project to .... ${env}...!"/>
		<if>
			<os family="windows"/>
				<then>
					<exec executable="cmd" dir="${deployer.home}/bin" failonerror="true">
						<arg value="/c" /> 
						<arg value="Deployer.bat"/>
						<arg value="--deploy" />
						<arg value="-dc" />
						<arg value="${proj.dc}" />
						<arg value="-project" />
						<arg value="${proj.name}" />
						<arg value="-host" />
						<arg value="${deployer.host}" />
						<arg value="-port" />
						<arg value="${deployer.port}" />
						<arg value="-user" />
						<arg value="${deployer.user}" />
						<arg value="-pwd" />
						<arg value="${deployer.pwd}" />
						<arg value="-reportFilePath" />
						<arg value="${build.output.dir}" />
					</exec>
				</then>
		<else>
					<exec executable="/bin/bash" dir="${deployer.home}/bin" failonerror="true">
						<arg value="Deployer.sh"/>
						<arg value="--deploy" />
						<arg value="-dc" />
						<arg value="${proj.dc}" />
						<arg value="-project" />
						<arg value="${proj.name}" />
						<arg value="-host" />
						<arg value="${deployer.host}" />
						<arg value="-port" />
						<arg value="${deployer.port}" />
						<arg value="-user" />
						<arg value="${deployer.user}" />
						<arg value="-pwd" />
						<arg value="${deployer.pwd}" />
						<arg value="-reportFilePath" />
						<arg value="${build.output.dir}" />
					</exec>
		</else>
		</if>
	</target>

</project>
